{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","pictureFile","users","mountUser","user","react_default","a","createElement","type","name","onChange","_this","handler","className","onClick","sendPicture","event","preventDefault","file","target","files","console","log","size","alert","value","setState","data","FormData","append","axios","post","then","loadUsers","_callee","localUsers","regenerator_default","wrap","_context","prev","next","fetch","method","res","json","resJSON","map","stop","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAIqBA,6MACnBC,MAAQ,CACNC,YAAa,KACbC,MAAO,MAGTC,UAAY,SAAAC,GAEV,OACEC,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOC,KAAK,OAAOC,SAAUC,EAAKC,UAC9CP,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASK,UAAU,4BAA4BC,QAASH,EAAKI,aAA1E,cAKNH,QAAU,SAAAI,GACRA,EAAMC,iBACN,IAAMC,EAAOF,EAAMG,OAAOC,MAAM,GAChCC,QAAQC,IAAI,YAAaJ,GACrBA,EAAKK,KAAQ,SACfC,MAAM,aACNR,EAAMG,OAAOM,MAAQ,MAErBd,EAAKe,SAAS,CAAEzB,YAAaiB,OAGjCH,YAAc,SAAAC,GAEZ,IAAMW,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQlB,EAAKX,MAAMC,aAE/B6B,IAAMC,KAAK,+BAAgCJ,EAAM,IAG9CK,KAAKX,QAAQC,QAIlBW,+BAAY,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA9B,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACVnB,QAAQC,IAAI,oBADFgB,EAAAE,KAAA,EAEJC,MAAM,8BAA+B,CACzCC,OAAQ,SAETV,KAAK,SAAAW,GAAG,OAAIA,EAAIC,SAChBZ,KAAK,SAAAa,GAAO,OAAIlC,EAAKe,SAAS,CAAExB,MAAO2C,MAN9B,OAOVxB,QAAQC,IAAI,mBAAoBX,EAAKX,MAAME,OAErCiC,EAAaxB,EAAKX,MAAME,MAAM4C,IAAI,SAAA1C,GAAI,OAAIO,EAAKR,UAAUC,KAE/DO,EAAKe,SAAS,CACZxB,MAAOiC,IAZC,wBAAAG,EAAAS,SAAAb,8EAmBV,OACE7B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACGyC,KAAK7C,qBA/DiB8C,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.6d1e2e6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nexport default class App extends Component {\n  state = {\n    pictureFile: null,\n    users: \"\"\n  };\n\n  mountUser = user => {\n    // console.log(\"user\", user);\n    return(\n      <div>\n        {/* <label>User: {user.name}</label> */}\n        <label>User: Test</label>\n        <input type=\"file\" name=\"file\" onChange={this.handler}/>\n        <button type=\"button\" className=\"btn btn-success btn-block\" onClick={this.sendPicture}>Upload</button>\n      </div>\n    )\n  }\n\n  handler = event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    console.log(\"fileinfo:\", file);\n    if (file.size > (1024 * 1024 * 1)) {\n      alert(\"big file!\");\n      event.target.value = null;\n    } else\n      this.setState({ pictureFile: file });\n  }\n\n  sendPicture = event => {\n    // event.preventDefault();\n    const data = new FormData() ;\n    data.append('file', this.state.pictureFile);\n\n    axios.post(\"http://localhost:8888/upload\", data, { /*receive two parameter endpoint url ,form data*/ })\n      // .then(res => { // then print response status\n      //   console.log(res.statusText);});\n      .then(console.log)\n  }\n\n\n  loadUsers = async () => {\n    console.log(\"inside loadUsers\");\n    await fetch(\"http://localhost:8888/users\", {  \n      method: \"POST\",\n    })\n    .then(res => res.json())\n    .then(resJSON => this.setState({ users: resJSON}));\n    console.log(\"this.state.users\", this.state.users);\n\n    const localUsers = this.state.users.map(user => this.mountUser(user));\n\n    this.setState({\n      users: localUsers\n    });\n  }\n\n  render() {\n    // console.log(\"asd\", Object.keys(this.state.users).length);\n    // console.log(\"this.state.users\", this.state.users);\n    return (\n      <div>\n        <div>\n          {this.mountUser()}\n        </div>\n\n        {/* <div>\n          <button className=\"btn btn-success\" onClick={this.loadUsers}> Get users </button>\n          {Object.keys(this.state.users).length ? \n            <table>\n            <thead>\n              <tr>\n                <th>id</th>\n                <th>Name</th>\n                <th>picture_name</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.users}\n            </tbody>\n          </table> :\n            \"empty\" }\n        </div> */}\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}